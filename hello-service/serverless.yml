# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: hello-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.8
  profile: backend
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:custom.DYNAMODB_TABLE}"
    - Effect: Allow
      Action:
        - sqs:*
      Resource: arn:aws:sqs:${opt:region, self:provider.region}:176324760155:${self:custom.SQS_QUEUE}

custom:
  DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  S3_BUCKET: ${self:service}-${opt:stage, self:provider.stage}-reports
  SQS_QUEUE: ${self:service}-${opt:stage, self:provider.stage}-query-tasks

functions:
  hello:
    handler: handler.hello
    environment:
      DYNAMODB_TABLE: ${self:custom.DYNAMODB_TABLE}
    events:
      - http:
          path: hello
          method: get

  create:
    handler: todos/create.create
    environment:
      DYNAMODB_TABLE: ${self:custom.DYNAMODB_TABLE}
    events:
      - http:
          path: todos
          method: post
          cors: true
          
  list:
    handler: todos/list.list
    environment:
      DYNAMODB_TABLE: ${self:custom.DYNAMODB_TABLE}
    events:
      - http:
          path: todos
          method: get
          cors: true

  update_cache:
    handler: lambdas/update_cache.update_cache
    events:
      - s3:
          bucket: ${self:custom.S3_BUCKET}
          event: s3:ObjectCreated:*
          rules:
            - prefix: async/
            - suffix: .csv
          existing: true

  task_handler:
    handler: lambdas/task_worker.run_query_task
    events:
      - sqs: arn:aws:sqs:${opt:region, self:provider.region}:176324760155:${self:custom.SQS_QUEUE}

# you can add CloudFormation resource templates here
resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.DYNAMODB_TABLE}

    ReportsBucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: ${self:custom.S3_BUCKET}
        AccessControl: Private

    SQSTaskQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: ${self:custom.SQS_QUEUE}


